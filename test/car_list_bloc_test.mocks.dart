// Mocks generated by Mockito 5.1.0 from annotations
// in car_garage/test/car_list_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:car_garage/network/models/car_dto.dart' as _i4;
import 'package:car_garage/repository/car_list_repository.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [CarListRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCarListRepository extends _i1.Mock implements _i2.CarListRepository {
  MockCarListRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.CarDto>> fetchCarList() =>
      (super.noSuchMethod(Invocation.method(#fetchCarList, []),
              returnValue: Future<List<_i4.CarDto>>.value(<_i4.CarDto>[]))
          as _i3.Future<List<_i4.CarDto>>);
  @override
  _i3.Future<void> addNewCar(_i4.CarDto? newCar) =>
      (super.noSuchMethod(Invocation.method(#addNewCar, [newCar]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
}
